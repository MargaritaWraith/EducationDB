#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EducationDB.Lib.Temp
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EducationDB")]
	public partial class DataBaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertCourses(Courses instance);
    partial void UpdateCourses(Courses instance);
    partial void DeleteCourses(Courses instance);
    partial void InsertLaboratoryWorkExecutions(LaboratoryWorkExecutions instance);
    partial void UpdateLaboratoryWorkExecutions(LaboratoryWorkExecutions instance);
    partial void DeleteLaboratoryWorkExecutions(LaboratoryWorkExecutions instance);
    partial void InsertLaboratoryWorks(LaboratoryWorks instance);
    partial void UpdateLaboratoryWorks(LaboratoryWorks instance);
    partial void DeleteLaboratoryWorks(LaboratoryWorks instance);
    partial void InsertLecturerCourse(LecturerCourse instance);
    partial void UpdateLecturerCourse(LecturerCourse instance);
    partial void DeleteLecturerCourse(LecturerCourse instance);
    partial void InsertLecturers(Lecturers instance);
    partial void UpdateLecturers(Lecturers instance);
    partial void DeleteLecturers(Lecturers instance);
    partial void InsertStudentCourse(StudentCourse instance);
    partial void UpdateStudentCourse(StudentCourse instance);
    partial void DeleteStudentCourse(StudentCourse instance);
    partial void InsertStudentGroups(StudentGroups instance);
    partial void UpdateStudentGroups(StudentGroups instance);
    partial void DeleteStudentGroups(StudentGroups instance);
    partial void InsertStudents(Students instance);
    partial void UpdateStudents(Students instance);
    partial void DeleteStudents(Students instance);
    #endregion
		
		public DataBaseDataContext() : 
				base(global::EducationDB.Lib.Properties.Settings.Default.EducationDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Courses> Courses
		{
			get
			{
				return this.GetTable<Courses>();
			}
		}
		
		public System.Data.Linq.Table<LaboratoryWorkExecutions> LaboratoryWorkExecutions
		{
			get
			{
				return this.GetTable<LaboratoryWorkExecutions>();
			}
		}
		
		public System.Data.Linq.Table<LaboratoryWorks> LaboratoryWorks
		{
			get
			{
				return this.GetTable<LaboratoryWorks>();
			}
		}
		
		public System.Data.Linq.Table<LecturerCourse> LecturerCourse
		{
			get
			{
				return this.GetTable<LecturerCourse>();
			}
		}
		
		public System.Data.Linq.Table<Lecturers> Lecturers
		{
			get
			{
				return this.GetTable<Lecturers>();
			}
		}
		
		public System.Data.Linq.Table<StudentCourse> StudentCourse
		{
			get
			{
				return this.GetTable<StudentCourse>();
			}
		}
		
		public System.Data.Linq.Table<StudentGroups> StudentGroups
		{
			get
			{
				return this.GetTable<StudentGroups>();
			}
		}
		
		public System.Data.Linq.Table<Students> Students
		{
			get
			{
				return this.GetTable<Students>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Courses : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<LaboratoryWorks> _LaboratoryWorks;
		
		private EntitySet<LecturerCourse> _LecturerCourse;
		
		private EntitySet<StudentCourse> _StudentCourse;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Courses()
		{
			this._LaboratoryWorks = new EntitySet<LaboratoryWorks>(new Action<LaboratoryWorks>(this.attach_LaboratoryWorks), new Action<LaboratoryWorks>(this.detach_LaboratoryWorks));
			this._LecturerCourse = new EntitySet<LecturerCourse>(new Action<LecturerCourse>(this.attach_LecturerCourse), new Action<LecturerCourse>(this.detach_LecturerCourse));
			this._StudentCourse = new EntitySet<StudentCourse>(new Action<StudentCourse>(this.attach_StudentCourse), new Action<StudentCourse>(this.detach_StudentCourse));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Courses_LaboratoryWorks", Storage="_LaboratoryWorks", ThisKey="Id", OtherKey="Course_Id")]
		public EntitySet<LaboratoryWorks> LaboratoryWorks
		{
			get
			{
				return this._LaboratoryWorks;
			}
			set
			{
				this._LaboratoryWorks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Courses_LecturerCourse", Storage="_LecturerCourse", ThisKey="Id", OtherKey="Courses_Id")]
		public EntitySet<LecturerCourse> LecturerCourse
		{
			get
			{
				return this._LecturerCourse;
			}
			set
			{
				this._LecturerCourse.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Courses_StudentCourse", Storage="_StudentCourse", ThisKey="Id", OtherKey="Courses_Id")]
		public EntitySet<StudentCourse> StudentCourse
		{
			get
			{
				return this._StudentCourse;
			}
			set
			{
				this._StudentCourse.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LaboratoryWorks(LaboratoryWorks entity)
		{
			this.SendPropertyChanging();
			entity.Courses = this;
		}
		
		private void detach_LaboratoryWorks(LaboratoryWorks entity)
		{
			this.SendPropertyChanging();
			entity.Courses = null;
		}
		
		private void attach_LecturerCourse(LecturerCourse entity)
		{
			this.SendPropertyChanging();
			entity.Courses = this;
		}
		
		private void detach_LecturerCourse(LecturerCourse entity)
		{
			this.SendPropertyChanging();
			entity.Courses = null;
		}
		
		private void attach_StudentCourse(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Courses = this;
		}
		
		private void detach_StudentCourse(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Courses = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LaboratoryWorkExecutions")]
	public partial class LaboratoryWorkExecutions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Order;
		
		private int _Student_Id;
		
		private int _LaboratoryWork_Id;
		
		private EntityRef<LaboratoryWorks> _LaboratoryWorks;
		
		private EntityRef<Students> _Students;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOrderChanging(System.Nullable<int> value);
    partial void OnOrderChanged();
    partial void OnStudent_IdChanging(int value);
    partial void OnStudent_IdChanged();
    partial void OnLaboratoryWork_IdChanging(int value);
    partial void OnLaboratoryWork_IdChanged();
    #endregion
		
		public LaboratoryWorkExecutions()
		{
			this._LaboratoryWorks = default(EntityRef<LaboratoryWorks>);
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int")]
		public System.Nullable<int> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Id", DbType="Int NOT NULL")]
		public int Student_Id
		{
			get
			{
				return this._Student_Id;
			}
			set
			{
				if ((this._Student_Id != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudent_IdChanging(value);
					this.SendPropertyChanging();
					this._Student_Id = value;
					this.SendPropertyChanged("Student_Id");
					this.OnStudent_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LaboratoryWork_Id", DbType="Int NOT NULL")]
		public int LaboratoryWork_Id
		{
			get
			{
				return this._LaboratoryWork_Id;
			}
			set
			{
				if ((this._LaboratoryWork_Id != value))
				{
					if (this._LaboratoryWorks.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLaboratoryWork_IdChanging(value);
					this.SendPropertyChanging();
					this._LaboratoryWork_Id = value;
					this.SendPropertyChanged("LaboratoryWork_Id");
					this.OnLaboratoryWork_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LaboratoryWorks_LaboratoryWorkExecutions", Storage="_LaboratoryWorks", ThisKey="LaboratoryWork_Id", OtherKey="Id", IsForeignKey=true)]
		public LaboratoryWorks LaboratoryWorks
		{
			get
			{
				return this._LaboratoryWorks.Entity;
			}
			set
			{
				LaboratoryWorks previousValue = this._LaboratoryWorks.Entity;
				if (((previousValue != value) 
							|| (this._LaboratoryWorks.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LaboratoryWorks.Entity = null;
						previousValue.LaboratoryWorkExecutions.Remove(this);
					}
					this._LaboratoryWorks.Entity = value;
					if ((value != null))
					{
						value.LaboratoryWorkExecutions.Add(this);
						this._LaboratoryWork_Id = value.Id;
					}
					else
					{
						this._LaboratoryWork_Id = default(int);
					}
					this.SendPropertyChanged("LaboratoryWorks");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_LaboratoryWorkExecutions", Storage="_Students", ThisKey="Student_Id", OtherKey="Id", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.LaboratoryWorkExecutions.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.LaboratoryWorkExecutions.Add(this);
						this._Student_Id = value.Id;
					}
					else
					{
						this._Student_Id = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LaboratoryWorks")]
	public partial class LaboratoryWorks : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Course_Id;
		
		private EntitySet<LaboratoryWorkExecutions> _LaboratoryWorkExecutions;
		
		private EntityRef<Courses> _Courses;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCourse_IdChanging(int value);
    partial void OnCourse_IdChanged();
    #endregion
		
		public LaboratoryWorks()
		{
			this._LaboratoryWorkExecutions = new EntitySet<LaboratoryWorkExecutions>(new Action<LaboratoryWorkExecutions>(this.attach_LaboratoryWorkExecutions), new Action<LaboratoryWorkExecutions>(this.detach_LaboratoryWorkExecutions));
			this._Courses = default(EntityRef<Courses>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course_Id", DbType="Int NOT NULL")]
		public int Course_Id
		{
			get
			{
				return this._Course_Id;
			}
			set
			{
				if ((this._Course_Id != value))
				{
					if (this._Courses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourse_IdChanging(value);
					this.SendPropertyChanging();
					this._Course_Id = value;
					this.SendPropertyChanged("Course_Id");
					this.OnCourse_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LaboratoryWorks_LaboratoryWorkExecutions", Storage="_LaboratoryWorkExecutions", ThisKey="Id", OtherKey="LaboratoryWork_Id")]
		public EntitySet<LaboratoryWorkExecutions> LaboratoryWorkExecutions
		{
			get
			{
				return this._LaboratoryWorkExecutions;
			}
			set
			{
				this._LaboratoryWorkExecutions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Courses_LaboratoryWorks", Storage="_Courses", ThisKey="Course_Id", OtherKey="Id", IsForeignKey=true)]
		public Courses Courses
		{
			get
			{
				return this._Courses.Entity;
			}
			set
			{
				Courses previousValue = this._Courses.Entity;
				if (((previousValue != value) 
							|| (this._Courses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Courses.Entity = null;
						previousValue.LaboratoryWorks.Remove(this);
					}
					this._Courses.Entity = value;
					if ((value != null))
					{
						value.LaboratoryWorks.Add(this);
						this._Course_Id = value.Id;
					}
					else
					{
						this._Course_Id = default(int);
					}
					this.SendPropertyChanged("Courses");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LaboratoryWorkExecutions(LaboratoryWorkExecutions entity)
		{
			this.SendPropertyChanging();
			entity.LaboratoryWorks = this;
		}
		
		private void detach_LaboratoryWorkExecutions(LaboratoryWorkExecutions entity)
		{
			this.SendPropertyChanging();
			entity.LaboratoryWorks = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LecturerCourse")]
	public partial class LecturerCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Lecturers_Id;
		
		private int _Courses_Id;
		
		private EntityRef<Courses> _Courses;
		
		private EntityRef<Lecturers> _Lecturers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLecturers_IdChanging(int value);
    partial void OnLecturers_IdChanged();
    partial void OnCourses_IdChanging(int value);
    partial void OnCourses_IdChanged();
    #endregion
		
		public LecturerCourse()
		{
			this._Courses = default(EntityRef<Courses>);
			this._Lecturers = default(EntityRef<Lecturers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lecturers_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Lecturers_Id
		{
			get
			{
				return this._Lecturers_Id;
			}
			set
			{
				if ((this._Lecturers_Id != value))
				{
					if (this._Lecturers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLecturers_IdChanging(value);
					this.SendPropertyChanging();
					this._Lecturers_Id = value;
					this.SendPropertyChanged("Lecturers_Id");
					this.OnLecturers_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Courses_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Courses_Id
		{
			get
			{
				return this._Courses_Id;
			}
			set
			{
				if ((this._Courses_Id != value))
				{
					if (this._Courses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourses_IdChanging(value);
					this.SendPropertyChanging();
					this._Courses_Id = value;
					this.SendPropertyChanged("Courses_Id");
					this.OnCourses_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Courses_LecturerCourse", Storage="_Courses", ThisKey="Courses_Id", OtherKey="Id", IsForeignKey=true)]
		public Courses Courses
		{
			get
			{
				return this._Courses.Entity;
			}
			set
			{
				Courses previousValue = this._Courses.Entity;
				if (((previousValue != value) 
							|| (this._Courses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Courses.Entity = null;
						previousValue.LecturerCourse.Remove(this);
					}
					this._Courses.Entity = value;
					if ((value != null))
					{
						value.LecturerCourse.Add(this);
						this._Courses_Id = value.Id;
					}
					else
					{
						this._Courses_Id = default(int);
					}
					this.SendPropertyChanged("Courses");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecturers_LecturerCourse", Storage="_Lecturers", ThisKey="Lecturers_Id", OtherKey="Id", IsForeignKey=true)]
		public Lecturers Lecturers
		{
			get
			{
				return this._Lecturers.Entity;
			}
			set
			{
				Lecturers previousValue = this._Lecturers.Entity;
				if (((previousValue != value) 
							|| (this._Lecturers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lecturers.Entity = null;
						previousValue.LecturerCourse.Remove(this);
					}
					this._Lecturers.Entity = value;
					if ((value != null))
					{
						value.LecturerCourse.Add(this);
						this._Lecturers_Id = value.Id;
					}
					else
					{
						this._Lecturers_Id = default(int);
					}
					this.SendPropertyChanged("Lecturers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lecturers")]
	public partial class Lecturers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Surname;
		
		private EntitySet<LecturerCourse> _LecturerCourse;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    #endregion
		
		public Lecturers()
		{
			this._LecturerCourse = new EntitySet<LecturerCourse>(new Action<LecturerCourse>(this.attach_LecturerCourse), new Action<LecturerCourse>(this.detach_LecturerCourse));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecturers_LecturerCourse", Storage="_LecturerCourse", ThisKey="Id", OtherKey="Lecturers_Id")]
		public EntitySet<LecturerCourse> LecturerCourse
		{
			get
			{
				return this._LecturerCourse;
			}
			set
			{
				this._LecturerCourse.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LecturerCourse(LecturerCourse entity)
		{
			this.SendPropertyChanging();
			entity.Lecturers = this;
		}
		
		private void detach_LecturerCourse(LecturerCourse entity)
		{
			this.SendPropertyChanging();
			entity.Lecturers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentCourse")]
	public partial class StudentCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Students_Id;
		
		private int _Courses_Id;
		
		private EntityRef<Courses> _Courses;
		
		private EntityRef<Students> _Students;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudents_IdChanging(int value);
    partial void OnStudents_IdChanged();
    partial void OnCourses_IdChanging(int value);
    partial void OnCourses_IdChanged();
    #endregion
		
		public StudentCourse()
		{
			this._Courses = default(EntityRef<Courses>);
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Students_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Students_Id
		{
			get
			{
				return this._Students_Id;
			}
			set
			{
				if ((this._Students_Id != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudents_IdChanging(value);
					this.SendPropertyChanging();
					this._Students_Id = value;
					this.SendPropertyChanged("Students_Id");
					this.OnStudents_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Courses_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Courses_Id
		{
			get
			{
				return this._Courses_Id;
			}
			set
			{
				if ((this._Courses_Id != value))
				{
					if (this._Courses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourses_IdChanging(value);
					this.SendPropertyChanging();
					this._Courses_Id = value;
					this.SendPropertyChanged("Courses_Id");
					this.OnCourses_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Courses_StudentCourse", Storage="_Courses", ThisKey="Courses_Id", OtherKey="Id", IsForeignKey=true)]
		public Courses Courses
		{
			get
			{
				return this._Courses.Entity;
			}
			set
			{
				Courses previousValue = this._Courses.Entity;
				if (((previousValue != value) 
							|| (this._Courses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Courses.Entity = null;
						previousValue.StudentCourse.Remove(this);
					}
					this._Courses.Entity = value;
					if ((value != null))
					{
						value.StudentCourse.Add(this);
						this._Courses_Id = value.Id;
					}
					else
					{
						this._Courses_Id = default(int);
					}
					this.SendPropertyChanged("Courses");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_StudentCourse", Storage="_Students", ThisKey="Students_Id", OtherKey="Id", IsForeignKey=true)]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.StudentCourse.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.StudentCourse.Add(this);
						this._Students_Id = value.Id;
					}
					else
					{
						this._Students_Id = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentGroups")]
	public partial class StudentGroups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Students> _Students;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public StudentGroups()
		{
			this._Students = new EntitySet<Students>(new Action<Students>(this.attach_Students), new Action<Students>(this.detach_Students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroups_Students", Storage="_Students", ThisKey="Id", OtherKey="StudentGroup_Id")]
		public EntitySet<Students> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Students entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroups = this;
		}
		
		private void detach_Students(Students entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroups = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Students : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Surname;
		
		private int _StudentGroup_Id;
		
		private EntitySet<LaboratoryWorkExecutions> _LaboratoryWorkExecutions;
		
		private EntitySet<StudentCourse> _StudentCourse;
		
		private EntityRef<StudentGroups> _StudentGroups;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnStudentGroup_IdChanging(int value);
    partial void OnStudentGroup_IdChanged();
    #endregion
		
		public Students()
		{
			this._LaboratoryWorkExecutions = new EntitySet<LaboratoryWorkExecutions>(new Action<LaboratoryWorkExecutions>(this.attach_LaboratoryWorkExecutions), new Action<LaboratoryWorkExecutions>(this.detach_LaboratoryWorkExecutions));
			this._StudentCourse = new EntitySet<StudentCourse>(new Action<StudentCourse>(this.attach_StudentCourse), new Action<StudentCourse>(this.detach_StudentCourse));
			this._StudentGroups = default(EntityRef<StudentGroups>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentGroup_Id", DbType="Int NOT NULL")]
		public int StudentGroup_Id
		{
			get
			{
				return this._StudentGroup_Id;
			}
			set
			{
				if ((this._StudentGroup_Id != value))
				{
					if (this._StudentGroups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentGroup_IdChanging(value);
					this.SendPropertyChanging();
					this._StudentGroup_Id = value;
					this.SendPropertyChanged("StudentGroup_Id");
					this.OnStudentGroup_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_LaboratoryWorkExecutions", Storage="_LaboratoryWorkExecutions", ThisKey="Id", OtherKey="Student_Id")]
		public EntitySet<LaboratoryWorkExecutions> LaboratoryWorkExecutions
		{
			get
			{
				return this._LaboratoryWorkExecutions;
			}
			set
			{
				this._LaboratoryWorkExecutions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_StudentCourse", Storage="_StudentCourse", ThisKey="Id", OtherKey="Students_Id")]
		public EntitySet<StudentCourse> StudentCourse
		{
			get
			{
				return this._StudentCourse;
			}
			set
			{
				this._StudentCourse.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroups_Students", Storage="_StudentGroups", ThisKey="StudentGroup_Id", OtherKey="Id", IsForeignKey=true)]
		public StudentGroups StudentGroups
		{
			get
			{
				return this._StudentGroups.Entity;
			}
			set
			{
				StudentGroups previousValue = this._StudentGroups.Entity;
				if (((previousValue != value) 
							|| (this._StudentGroups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentGroups.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._StudentGroups.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._StudentGroup_Id = value.Id;
					}
					else
					{
						this._StudentGroup_Id = default(int);
					}
					this.SendPropertyChanged("StudentGroups");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LaboratoryWorkExecutions(LaboratoryWorkExecutions entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_LaboratoryWorkExecutions(LaboratoryWorkExecutions entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
		
		private void attach_StudentCourse(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_StudentCourse(StudentCourse entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
	}
}
#pragma warning restore 1591
